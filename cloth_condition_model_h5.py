# -*- coding: utf-8 -*-
"""cloth_condition_model.h5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yHDSBbWvXB09Di0uTG4OLb3ZA0zSRbJP
"""

# Import libraries
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt

# âœ… Load Fashion-MNIST dataset directly from Keras
(train_images, train_labels), (test_images, test_labels) = keras.datasets.fashion_mnist.load_data()

# Normalize pixel values to 0-1
train_images = train_images / 255.0
test_images = test_images / 255.0

# Reshape to match CNN input format (add channel dimension)
train_images = train_images.reshape((-1, 28, 28, 1))
test_images = test_images.reshape((-1, 28, 28, 1))

print("âœ… Dataset loaded successfully!")
print(f"Training samples: {train_images.shape[0]}, Testing samples: {test_images.shape[0]}")

model.save("fashion_mnist_model.h5")
print("âœ… Model saved as fashion_mnist_model.h5")

import numpy as np
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt

# ---------------------------------------------
# âœ… Simplify Fashion-MNIST into 2 classes:
# Let's assume:
#  - Sellable = good-looking items (like class 0â€“4)
#  - Recyclable = worn/old type items (class 5â€“9)
# ---------------------------------------------
(train_images, train_labels), (test_images, test_labels) = keras.datasets.fashion_mnist.load_data()

train_images = train_images / 255.0
test_images = test_images / 255.0

# Convert to binary labels
train_labels_binary = np.where(train_labels < 5, 0, 1)
test_labels_binary  = np.where(test_labels < 5, 0, 1)

# Reshape for CNN
train_images = train_images.reshape((-1, 28, 28, 1))
test_images = test_images.reshape((-1, 28, 28, 1))

# ---------------------------------------------
# ðŸ§  Define CNN Model
# ---------------------------------------------
model = keras.Sequential([
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    layers.MaxPooling2D(2,2),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D(2,2),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.3),
    layers.Dense(1, activation='sigmoid')  # Binary output
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# ---------------------------------------------
# ðŸš€ Train the Model
# ---------------------------------------------
history = model.fit(train_images, train_labels_binary,
                    epochs=10,
                    validation_data=(test_images, test_labels_binary))

# ---------------------------------------------
# ðŸ“ˆ Plot Accuracy
# ---------------------------------------------
plt.plot(history.history['accuracy'], label='train acc')
plt.plot(history.history['val_accuracy'], label='val acc')
plt.title('Training Progress')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# ---------------------------------------------
# ðŸ’¾ Save Model
# ---------------------------------------------
model.save("cloth_condition_model.h5")
print("âœ… Model saved as cloth_condition_model.h5")